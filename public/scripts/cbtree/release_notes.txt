		DOJO Multi State Checkbox Tree			http://www.thejekels.com											or 								http://www.thejekels.com/blog/Release notes:		VERSION 1.7 OF THE CHECKBOX TREE WILL NOT WORK WITH ANY DOJO VERSION		PRIOR TO 1.7. STARTING WITH DOJO 1.6 A MAJOR REFACTORING IS UNDERWAY		TO ADOPT AMD (Asynchronous/Modules/Definition).   VERSION 1.7 OF THE		CHECKBOX TREE HAS ADOPTED SOME, BUT NOT ALL, OF THESE NEW FEATURES.				More information about dojo and AMD can be found here:					http://dojotoolkit.org/blog/learn-more-about-amd			Changes from 1.4+	to 1.7+			1	-	_createCheckbox() has been updated to correctly handle the properties 				'branchIcons' and 'nodeIcons' with dojo 1.7+					2 -	local method _setStateClass() has been removed as it no longer needed.				dojo 1.7+ has adopted the checked state 'mixed' for widgets. As a result				the css classes are now set correctly by the default _setStateClass().			Note: dijit checkboxes still do not support a 'mixed' checked state. As						a result 'cbtree.CheckBox' stays in place.					3 - Updating the checkbox state has been moved from 'cbtree._CheckBoxTreeNode'				to the 'cbtree.CheckBox' creating a new method _stateState(). Although not				related to this it also fixes the issue of having to hover over a checkbox				after a state update.			4 -	All deprecated dojo functions have been replaced with their 1.7+ counter				parts.				5	-	Due to the dojo updates since 1.4 many references to private dojo functions				and variables are no longer needed and have been removed.		6 -	The default value of the 'cbtree.CheckBoxStoreModel' property 'checkboxIdent'				has been renamed from 'checkbox' to 'checked' to better reflect its intended				purpose.								In order to use previous JSON files, that is, any file created prior to the 				1.7 implementation of the Multi State Checkbox Tree you have two options:								A	-	Explicitly specify the property 'checkboxIdent' with the value 'checkbox'						when creating the store. For example:													var model = new cbtree.CheckBoxStoreModel( {											store: store,											query: {type: 'parent'},											rootLabel: 'The Family',													...											checkboxIdent: 'checkbox',													...											}); 				B -	Rename the checkbox attribute in your JSON file to 'checked'. For example:									 { name:'Pascal', type:'child', checkbox: false },					 { name:'Charlotte', type:'child', checkbox: false },																becomes:									 { name:'Pascal', type:'child', checked: false },					 { name:'Charlotte', type:'child', checked: false },		7	-	When no 'checkbox' attribute was specified in the JSON file and the model 				property 'checkboxAll' was set to false, still an attempt was made to set				the checkbox state even though no checkbox was created resulting in an				error. This issue has been fixed.	New Features:			1 -	Full support for the claro theme including all required images.				2 -	Two new methods have been added to the tree model, as a convenience, to make				it easier to programmatically check or uncheck checkboxes.								1 -	check( query, callback, scope )					The query argument is either a query object or string used to search the					data store. Any store item that matches the query will have its checkbox					checked. The optional callback argument is a function which will be called					on completion as: callback(matches, updates). Parameter matches specifies					the total number of store items that matched the query whereas updates is					the number of matches that actually changed state.					The optional argument scope sets the context in which the callback function					is called. If omitted, the callback function is called in the context of 					tree.model.										Assume a tree is created as follows:						var tree = new cbtree.CheckBoxTree( {	model: model, 																									id: "MenuTree" 																								});												.												.												.					Example 1:											tree.model.check( { name: "John" } );					Example 2:						var query = new Object();												query.name = "John";						tree.model.check( query );					Example 3:											function checkedCount( matches, number ) {							alert( "Updates: " + number );						}											tree.model.check( { name: "John" }, checkedCount, this );				2 - uncheck( query, callback, scope )									Similar to the check() method except that any store item matching the					query will be unchecked instead.			3 -	A new property is added to the tree model call 'branchReadOnly'. If set					it makes the checkbox associated with a branch read-only.   The default 					value is false. To set the property create the store as follows:											var model = new cbtree.CheckBoxStoreModel( {										store: store,										query: {type: 'parent'},										rootLabel: 'The Family',												...										branchReadOnly: true,												...										}); 							Additional information:			1 -	The distribution still holds the dojo 1.3 and 1.4 versions of the Multi				State Checkbox tree.						2 - There are no currently plans to test or provide versions of the tree for				dojo 1.5 and 1.6.				3 - Additional information may be made available on:							http://www.thejekels.com/blog/