<?php
/**
 *
 *
 * @copyright Copyright (c) 2011-2013 Miroslav Marek <mirek.marek.2m@gmail.com>
 * @license http://www.php-jet.net/php-jet/license.txt
 * @author Miroslav Marek <mirek.marek.2m@gmail.com>
 * @version <%VERSION%>
 *
 * @category Jet
 * @package Object
 */

namespace Jet;

class Object {

	/**
	 * @var string|null
	 */
	protected static $__factory_class_name = null;
	/**
	 * @var string|null
	 */
	protected static $__factory_class_method_name = null;
	/**
	 * @var string|null
	 */
	protected static $__factory_must_be_instance_of_class_name = null;

	/**
	 * Signals list
	 *
	 * array(
	 *      "/my_signal_group/signal1",
	 *      "/my_signal_group/signal2"
	 * )
	 *
	 *
	 * @var array
	 */
	protected static $__signals = array();

	/**
	 * @var string
	 */
	protected $__signals_signal_object_class_name = Application_Signals::DEFAULT_SIGNAL_OBJECT_CLASS_NAME;


	/**
	 * Default serialize rules (don't serialize __* properties)
	 *
	 * @return array
	 */
	public function __sleep(){
		$vars = get_object_vars($this);
		foreach($vars as $k => $v){
			if(substr($k, 0, 2) === "__"){
				unset($vars[$k]);
			}
		}
		return array_keys($vars);
	}

	/**
	 * Getter for protected properties
	 *
	 * @param string $key
	 * @throws Object_Exception
	 *
	 */
	public function __get( $key ) {

		if(!property_exists($this, $key)) {
			throw new Object_Exception(
				"Undefined class property ".get_class($this)."->{$key}",
				Object_Exception::CODE_UNDEFINED_PROPERTY
			);
		}

		throw new Object_Exception(
			"Access to protected class property ".get_class($this)."->{$key}",
			Object_Exception::CODE_ACCESS_PROTECTED_PROPERTY
		);
	}

	/**
	 * Setter for protected properties
	 *
	 * @param string $key
	 * @param mixed $value
	 * @throws Object_Exception
	 */
	public function __set( $key, $value ) {

		if(!property_exists($this, $key)) {
			throw new Object_Exception(
				"Undefined class property ".get_class($this)."->{$key}",
				Object_Exception::CODE_UNDEFINED_PROPERTY
			);
		}

		throw new Object_Exception(
			"Access to protected class property ".get_class($this)."->{$key}",
			Object_Exception::CODE_ACCESS_PROTECTED_PROPERTY
		);
	}

	/**
	 * Get factory class name
	 *
	 * @return string
	 */
	final public static function getFactoryClassName() {
		return static::$__factory_class_name;
	}

	/**
	 * Get factory class method name
	 *
	 *
	 * @return string
	 */
	final public static function getFactoryClassMethod() {
		return static::$__factory_class_method_name;
	}


	/**
	 * Get class name which the object generated by factory must be instance of
	 *
	 * @return string
	 */
	final public static function getFactoryMustBeInstanceOfClassName() {
		return static::$__factory_must_be_instance_of_class_name;
	}


	/**
	 * @param $signal_name
	 *
	 * @return bool
	 */
	public function getHasSignal( $signal_name ) {
		return in_array( $signal_name, static::$__signals );
	}

	/**
	 * @param string $signal_name
	 *
	 * @return string
	 */
	public function getSignalObjectClassName( $signal_name ) {
		return $this->__signals_signal_object_class_name;
	}

	/**
	 * @param $signal_name
	 * @param array $signal_data
	 *
	 * @throws Object_Exception
	 *
	 * @return Application_Signals_Signal
	 */
	public function sendSignal( $signal_name, array $signal_data=array() ) {

		$signal = Application_Signals::createSignal( $this, $signal_name, $signal_data );

		Application_Signals_Dispatcher::dispatchSignal( $signal );

		return $signal;
	}

	/**
	 * Example:
	 *
	 * class name: MyNamespace\MyClass
	 *
	 * returns MyClass
	 *
	 * @return string
	 */
	public function getClassNameWithoutNamespace() {
		$class_name = explode("\\", get_class($this));
		return end($class_name);
	}

	/**
	 * @param $property_name
	 *
	 * @return bool
	 */
	public function getHasProperty( $property_name ) {
		if(
			$property_name[0]=="_" ||
			!property_exists($this, $property_name)
		) {
			return false;
		}
		return true;
	}

	/**
	 * @param $property_name
	 *
	 * @return string
	 */
	public function getSetterMethodName( $property_name ) {
		$setter_method_name = "set".str_replace("_", "", $property_name);

		return $setter_method_name;
	}
}